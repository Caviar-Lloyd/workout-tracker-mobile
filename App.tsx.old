import { NavigationContainer, DefaultTheme, useNavigation, useNavigationState } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View, TouchableOpacity, Text, Animated, Dimensions, ActivityIndicator } from 'react-native';
import { useState, useEffect, useRef } from 'react';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { supabase } from './lib/supabase/client';
import { Session } from '@supabase/supabase-js';
import DashboardScreen from './screens/DashboardScreen';
import WorkoutScreen from './screens/WorkoutScreen';
import ProgramScreen from './screens/ProgramScreen';
import AuthScreen from './screens/AuthScreen';
import ProfileCompletionScreen from './screens/ProfileCompletionScreen';
import DatabaseCheckScreen from './screens/DatabaseCheckScreen';
import ParticleBackground from './components/ParticleBackground';
import Svg, { Path } from 'react-native-svg';

const Stack = createNativeStackNavigator();
const { width: SCREEN_WIDTH } = Dimensions.get('window');

const DarkTheme = {
  ...DefaultTheme,
  colors: {
    ...DefaultTheme.colors,
    primary: '#2ddbdb',
    background: '#0a0e27',
    card: '#0a0e27',
    text: '#ffffff',
    border: 'rgba(255,255,255,0.1)',
    notification: '#2ddbdb',
  },
};

// Premium SVG Icons
const DashboardIcon = ({ size = 24, color = '#fff' }: { size?: number; color?: string }) => (
  <Svg width={size} height={size} viewBox="0 0 24 24" fill="none">
    <Path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z" fill={color} />
  </Svg>
);

const ProgramIcon = ({ size = 24, color = '#fff' }: { size?: number; color?: string }) => (
  <Svg width={size} height={size} viewBox="0 0 24 24" fill="none">
    <Path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z" fill={color} />
  </Svg>
);

const WorkoutIcon = ({ size = 24, color = '#fff' }: { size?: number; color?: string }) => (
  <Svg width={size} height={size} viewBox="0 0 24 24" fill="none">
    <Path d="M20.57 14.86L22 13.43 20.57 12 17 15.57 8.43 7 12 3.43 10.57 2 9.14 3.43 7.71 2 5.57 4.14 4.14 2.71 2.71 4.14l1.43 1.43L2 7.71l1.43 1.43L2 10.57 3.43 12 7 8.43 15.57 17 12 20.57 13.43 22l1.43-1.43L16.29 22l2.14-2.14 1.43 1.43 1.43-1.43-1.43-1.43L22 16.29z" fill={color} />
  </Svg>
);

function ExpandableMenu() {
  const navigation = useNavigation();
  const [menuOpen, setMenuOpen] = useState(false);
  const slideAnim = useRef(new Animated.Value(400)).current; // Start completely off-screen
  const insets = useSafeAreaInsets();
  const isNavigatingRef = useRef(false);

  const toggleMenu = () => {
    // Don't toggle if currently navigating
    if (isNavigatingRef.current) return;

    const toValue = menuOpen ? 400 : 0; // 400 = hidden off-screen, 0 = visible
    Animated.spring(slideAnim, {
      toValue,
      useNativeDriver: true,
      tension: 65,
      friction: 11,
    }).start();
    setMenuOpen(!menuOpen);
  };

  const navigateTo = (screen: string) => {
    // Prevent multiple rapid navigations
    if (isNavigatingRef.current) return;

    isNavigatingRef.current = true;

    // @ts-ignore
    navigation.reset({
      index: 0,
      routes: [{ name: screen }],
    });

    // Reset navigation flag after a short delay
    setTimeout(() => {
      isNavigatingRef.current = false;
    }, 300);
  };

  return (
    <>
      {/* Menu Button */}
      <TouchableOpacity
        style={[
          styles.menuButton,
          { bottom: Math.max(insets.bottom, 20) + 10 } // Add 10px extra padding above navigation bar
        ]}
        onPress={toggleMenu}
        hitSlop={{ top: 40, bottom: 40, left: 40, right: 40 }} // Larger touch area - 40px all around
      >
        <View style={styles.menuBar} />
      </TouchableOpacity>

      {/* Slide-up Menu */}
      <Animated.View
        style={[
          styles.slideMenu,
          {
            transform: [{ translateY: slideAnim }],
            bottom: Math.max(insets.bottom, 20) + 70,
            zIndex: 1001,
          },
        ]}
        pointerEvents={menuOpen ? 'auto' : 'none'}
      >
        <TouchableOpacity
          style={styles.menuItem}
          activeOpacity={0.7}
          delayPressIn={0}
          onPressIn={() => {
            // Close menu synchronously before anything else
            slideAnim.stopAnimation(() => {
              slideAnim.setValue(400);
              setMenuOpen(false);
              navigateTo('Dashboard');
            });
          }}
        >
          <DashboardIcon size={22} color="#2ddbdb" />
          <Text style={styles.menuItemText}>Dashboard</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.menuItem}
          activeOpacity={0.7}
          delayPressIn={0}
          onPressIn={() => {
            // Close menu synchronously before anything else
            slideAnim.stopAnimation(() => {
              slideAnim.setValue(400);
              setMenuOpen(false);
              navigateTo('Program');
            });
          }}
        >
          <ProgramIcon size={22} color="#2ddbdb" />
          <Text style={styles.menuItemText}>Program Overview</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.menuItem}
          activeOpacity={0.7}
          delayPressIn={0}
          onPressIn={() => {
            // Close menu synchronously before anything else
            slideAnim.stopAnimation(() => {
              slideAnim.setValue(400);
              setMenuOpen(false);
              navigateTo('Workout');
            });
          }}
        >
          <WorkoutIcon size={22} color="#2ddbdb" />
          <Text style={styles.menuItemText}>Workout Tracker</Text>
        </TouchableOpacity>
      </Animated.View>
    </>
  );
}

function AppNavigator() {
  return (
    <>
      <Stack.Navigator
        screenOptions={{
          headerShown: false,
          contentStyle: { backgroundColor: '#0a0e27' }
        }}
      >
        <Stack.Screen name="DatabaseCheck" component={DatabaseCheckScreen} />
        <Stack.Screen name="Dashboard" component={DashboardScreen} />
        <Stack.Screen name="Program" component={ProgramScreen} />
        <Stack.Screen name="Workout" component={WorkoutScreen} />
      </Stack.Navigator>
      <ExpandableMenu />
    </>
  );
}

export default function App() {
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [needsProfileCompletion, setNeedsProfileCompletion] = useState(false);

  useEffect(() => {
    // Check current session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      checkProfileCompletion(session);
    });

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      checkProfileCompletion(session);
    });

    return () => subscription.unsubscribe();
  }, []);

  const checkProfileCompletion = async (session: Session | null) => {
    if (!session) {
      setLoading(false);
      setNeedsProfileCompletion(false);
      return;
    }

    // First check if user has a client profile by user_id
    let { data: client, error } = await supabase
      .from('clients')
      .select('*')
      .eq('user_id', session.user.id)
      .single();

    // If not found by user_id, try to find by email and link it
    if (error && error.code === 'PGRST116') {
      const { data: clientByEmail, error: emailError } = await supabase
        .from('clients')
        .select('*')
        .eq('email', session.user.email)
        .single();

      if (clientByEmail && !emailError) {
        // Found existing client by email - link it to the user_id
        const { error: updateError } = await supabase
          .from('clients')
          .update({ user_id: session.user.id })
          .eq('email', session.user.email);

        if (!updateError) {
          client = clientByEmail;
          error = null;
        }
      }
    }

    if (error || !client) {
      // No profile found - need to complete profile
      setNeedsProfileCompletion(true);
    } else {
      setNeedsProfileCompletion(false);
    }

    setLoading(false);
  };

  if (loading) {
    return (
      <SafeAreaProvider>
        <View style={[styles.container, styles.loadingContainer]}>
          <ActivityIndicator size="large" color="#2ddbdb" />
          <StatusBar style="light" />
        </View>
      </SafeAreaProvider>
    );
  }

  return (
    <SafeAreaProvider>
      <View style={styles.container}>
        <NavigationContainer theme={DarkTheme}>
          {!session ? (
            <AuthScreen />
          ) : needsProfileCompletion ? (
            <ProfileCompletionScreen />
          ) : (
            <AppNavigator />
          )}
        </NavigationContainer>
        <StatusBar style="light" />
      </View>
    </SafeAreaProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0a0e27',
  },
  loadingContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  touchTriggerArea: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: 60,
    zIndex: 99,
  },
  touchBreadcrumbHeader: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    zIndex: 100,
    backgroundColor: 'rgba(10, 14, 39, 0.95)',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(45, 219, 219, 0.2)',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 8,
    elevation: 5,
  },
  headerContent: {
    paddingHorizontal: 20,
    paddingVertical: 12,
  },
  breadcrumbList: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  breadcrumbItem: {
    paddingVertical: 4,
    paddingHorizontal: 2,
  },
  breadcrumbSeparator: {
    marginHorizontal: 8,
  },
  breadcrumbLink: {
    fontSize: 14,
    color: '#2ddbdb',
    fontWeight: '500',
  },
  breadcrumbCurrent: {
    fontSize: 14,
    color: '#9ca3af',
    fontWeight: '400',
  },
  menuButton: {
    position: 'absolute',
    bottom: 20,
    left: SCREEN_WIDTH * 0.25,
    width: SCREEN_WIDTH * 0.5,
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 1000,
  },
  menuBar: {
    width: '100%',
    height: 5,
    backgroundColor: '#2ddbdb',
    borderRadius: 10,
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    zIndex: 999,
  },
  slideMenu: {
    position: 'absolute',
    left: 20,
    right: 20,
    bottom: 80,
    backgroundColor: 'rgba(10, 14, 39, 0.95)',
    borderWidth: 1,
    borderColor: 'rgba(45, 219, 219, 0.3)',
    borderRadius: 16,
    zIndex: 1001,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 10,
  },
  menuItem: {
    width: '100%',
    paddingVertical: 24,
    paddingHorizontal: 24,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.05)',
    backgroundColor: 'transparent',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 12,
  },
  menuItemText: {
    fontSize: 17,
    color: '#fff',
    fontWeight: '500',
    letterSpacing: 0.3,
  },
});
